(MACHINE MUTEX2
  VARIABLES p1 , p2
  CONSTANTS idle , wait , crit
  VALUES
    p1 = 0 ; p2 = 0 ;
    idle = 0 ; wait = 1 ; crit = 2
  OPERATIONS
    mutex =
      WHILE true DO
	  BEGIN
		  IF p1 == idle /\ p2 == idle THEN (p1 := wait OR p2 := wait) 
		  ELSE
		  IF p1 == idle /\ p2 == wait THEN p2 := crit OR (p1 := wait ; p2 := crit)
		  ELSE
		  IF p1 == idle /\ p2 == crit THEN p1 := wait OR p2 := idle 
		  ELSE
		  IF p1 == wait /\ p2 == idle THEN p1 := crit OR (p1 := crit ; p2 := wait) 
		  ELSE
		  IF p1 == wait /\ p2 == crit THEN p2 := idle 
		  ELSE
		  IF p1 == crit /\ p2 == idle THEN p1 := idle OR p2 := wait 
		  ELSE
		  IF p1 == crit /\ p2 == wait THEN p1 := idle 
		  END END END END END END END
	  END
END)

(view)

--- Safety
(say o Model checking safety: mc mutex() |= [] ~ (p1(2) /\ p2(2)))
(say \t The initial state is given by the VALUES clause.)
(mc mutex() |= [] ~ (p1(2) /\ p2(2)))

--- Liveness
(say o Model checking liveness: mc mutex() |= [] (p1(1) -> <> p1(2)))
(mc mutex() |= [] (p1(1) -> <> p1(2)))

--- Strong liveness
(say o Model checking strong liveness: mc mutex() |= ([]<> p1(1)) -> ([]<> p1(2)))
(mc mutex() |= ([]<> p1(1)) -> ([]<> p1(2)))